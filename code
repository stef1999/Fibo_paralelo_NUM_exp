#imports
import threading
from Queue import Queue
import time


#funcion utilizada para llenar la lista de enteros hasta el numero de expediente (21829080-1)
fibo_dict = {}
shared_queue = Queue()
list = []
calc = 0
#inicio cronometro
inicioP = time.time()

while int(calc) < 21829080:
    list.append(calc)
    calc = int(calc) + 1



queue_condition = threading.Condition()


def fibonacci_task(condition):
    with condition:

        while shared_queue.empty():
            print("[{}] -esperando elementos en la cola".format(threading.current_thread().name))
            condition.wait()
        #bucle que va haciendo las operaciones
        else:
            value = shared_queue.get()
            a, b = 0, 1
            for item in range(value):
                a, b = b, a + b
                fibo_dict[value] = a

        shared_queue.task_done()
        print("[{}] fibonacci of key [{}] with result [{}]".
              format(threading.current_thread().name, value, fibo_dict[value]))

#funcion que inicia el funcionamiento de la cola
def queue_task(condition):
    print('cola going on')
    with condition:
        for item in list:
            shared_queue.put(item)

        print("los threads estan listos para entrar a la cola")
        condition.notifyAll()

#establezco 8 threads por que mi pc tiene 8 cores
threads = []
for i in range(8):
    thread = threading.Thread(target=fibonacci_task, args=(queue_condition,))
    thread.daemon = True
    threads.append(thread)

[thread.start() for thread in threads]

prod = threading.Thread(name='queue_task_thread', target=queue_task, args=(queue_condition,))
prod.daemon = True
prod.start()

[thread.join() for thread in threads]
#final cronometro
finalP = time.time()
#imprimo por consola el resultado y el tiempo empleado
print("[{}] - Result {}".format(threading.current_thread().name, fibo_dict, inicioP - finalP ))
